stages:      
  - lint    
  - build
  - test
  - deploy

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - .tox/
    - venv/

default:
  before_script:
    - python --version  # For debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install tox

lint_job:
  stage: lint
  # Official language image. Look for the different tagged releases at:
  # https://hub.docker.com/r/library/python/tags/
  image: python:${PYTHON_VERSION}
  script:
    - tox -e ${TOXENV}
  parallel:
    matrix:
      - PYTHON_VERSION: "3.10"
        TOXENV: [bandit, black, flake8]

test_job:
  stage: test
  when: on_success
  # Official language image. Look for the different tagged releases at:
  # https://hub.docker.com/r/library/python/tags/
  image: python:${PYTHON_VERSION}
  script:
    - tox -e ${TOXENV}
  parallel:
    matrix:
      - PYTHON_VERSION: "3.9"
        TOXENV: [py39]
      - PYTHON_VERSION: "3.10"
        TOXENV: [py310]
      - PYTHON_VERSION: "3.11"
        TOXENV: [py311]
      - PYTHON_VERSION: "3.12"
        TOXENV: [py312]

coverage_job:
  stage: build
  when: on_success
  # Official language image. Look for the different tagged releases at:
  # https://hub.docker.com/r/library/python/tags/
  image: python:3.10
  script:
    - tox -e cov
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

build_job:
  stage: build
  when: on_success
  image: python:3.10
  script:
    - python setup.py bdist_wheel
    # an alternative approach is to install and run:
    - pip install dist/*
    # run the command here
  artifacts:
    paths:
      - dist/*.whl

